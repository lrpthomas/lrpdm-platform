generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Business information
  businessName    String? @map("business_name")
  businessAddress String? @map("business_address")
  businessPhone   String? @map("business_phone")
  
  // Security
  failedLoginAttempts Int      @default(0) @map("failed_login_attempts")
  isLocked           Boolean  @default(false) @map("is_locked")
  lockedUntil        DateTime? @map("locked_until")

  accounts Account[]
  sessions Session[]
  files    File[]
  folders  Folder[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model File {
  id          String   @id @default(cuid())
  name        String
  originalName String  @map("original_name")
  size        Int
  mimeType    String   @map("mime_type")
  path        String
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  
  userId      String   @map("user_id")
  folderId    String?  @map("folder_id")
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?  @relation(fields: [folderId], references: [id])

  @@map("files")
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  
  userId    String   @map("user_id")
  parentId  String?  @map("parent_id")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderHierarchy")
  files     File[]

  @@map("folders")
}

model AppAccess {
  id     String @id @default(cuid())
  userId String @map("user_id")
  appId  String @map("app_id")
  access Boolean @default(true)
  
  @@unique([userId, appId])
  @@map("app_access")
}

enum UserRole {
  USER
  ADMIN
  OWNER
}

enum Plan {
  FREE
  BASIC
  PRO
  OWNER_DEV
}
